syntax = "proto3";

package api.client.service.v1;

import "google/api/annotations.proto";

option go_package = "dipper/api/client/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.client`.service.v1";

service Client {
  rpc ListNet (ListNetReq) returns (ListNetReply) {
    option (google.api.http) = {
      get: "/server/api/sys/net"
    };
  }

  rpc ListCom (ListComReq) returns (ListComReply) {
    option (google.api.http) = {
      get: "/server/api/sys/com"
    };
  }

  rpc GetSystemInfo (GetSystemInfoReq) returns (GetSystemInfoReply) {
    option (google.api.http) = {
      get: "/server/api/sys/info"
    };
  }

  rpc ListAntivirus (ListAntivirusReq) returns (ListAntivirusReply) {
    option (google.api.http) = {
      get: "/server/api/sys/antivirus"
    };
  }

  rpc GetHostInfo (GetHostInfoReq) returns (GetHostInfoReply) {
    option (google.api.http) = {
      get: "/server/api/host/info"
    };
  }

  rpc CheckFirstConn (CheckFirstConnReq) returns (CheckFirstConnReply) {
    option (google.api.http) = {
      get: "/server/api/conn/check"
    };
  }

  rpc ConnectServer (ConnectServerReq) returns (ConnectServerReply) {
    option (google.api.http) = {
      get: "/server/api/conn/open"
    };
  }
}

message ListNetReq {}
message ListNetReply {
  message Net {
    string name = 1;
    string ip = 2;
    string gateway = 3;
    string subnet_mask = 4;
    string mac = 5;
  }
  int32 code = 1;
  string msg = 2;
  repeated Net data = 3;
}

message ListComReq {}
message ListComReply {
  message Com {
    string name = 1;
    string desc = 2;
  }
  int32 code = 1;
  string msg = 2;
  repeated Com data = 3;
}

message GetSystemInfoReq {}
message GetSystemInfoReply {
  message SystemInfo {
    string name = 1;
    string os = 2;
    string version = 3;
  }
  int32 code = 1;
  string msg = 2;
  SystemInfo data = 3;
}

message ListAntivirusReq {}
message ListAntivirusReply {
  int32 code = 1;
  string msg = 2;
  repeated string data = 3;
}

message GetHostInfoReq {}
message GetHostInfoReply {
  message HostInfo {
    string name = 1;
    string manager = 2;
    string phone = 3;
  }

  int32 code = 1;
  string msg = 2;
  HostInfo data = 3;
}

message CheckFirstConnReq {}
message CheckFirstConnReply {
  message ConnCheck {
    bool first = 1;
    string verifyCode = 2;
  }

  int32 code = 1;
  string msg = 2;
  ConnCheck data = 3;
}

message ConnectServerReq {}
message ConnectServerReply {
  int32 code = 1;
  string msg = 2;
}
