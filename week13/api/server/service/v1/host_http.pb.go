// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type HostHTTPServer interface {
	CreateHost(context.Context, *CreateHostReq) (*CreateHostReply, error)
	ListHost(context.Context, *ListHostReq) (*ListHostReply, error)
}

func RegisterHostHTTPServer(s *http.Server, srv HostHTTPServer) {
	r := s.Route("/")
	r.GET("/server/api/host/add", _Host_CreateHost0_HTTP_Handler(srv))
	r.GET("/server/api/host/all", _Host_ListHost0_HTTP_Handler(srv))
}

func _Host_CreateHost0_HTTP_Handler(srv HostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateHostReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.server.service.v1.Host/CreateHost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateHost(ctx, req.(*CreateHostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateHostReply)
		return ctx.Result(200, reply)
	}
}

func _Host_ListHost0_HTTP_Handler(srv HostHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHostReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.server.service.v1.Host/ListHost")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHost(ctx, req.(*ListHostReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListHostReply)
		return ctx.Result(200, reply)
	}
}

type HostHTTPClient interface {
	CreateHost(ctx context.Context, req *CreateHostReq, opts ...http.CallOption) (rsp *CreateHostReply, err error)
	ListHost(ctx context.Context, req *ListHostReq, opts ...http.CallOption) (rsp *ListHostReply, err error)
}

type HostHTTPClientImpl struct {
	cc *http.Client
}

func NewHostHTTPClient(client *http.Client) HostHTTPClient {
	return &HostHTTPClientImpl{client}
}

func (c *HostHTTPClientImpl) CreateHost(ctx context.Context, in *CreateHostReq, opts ...http.CallOption) (*CreateHostReply, error) {
	var out CreateHostReply
	pattern := "/server/api/host/add"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.server.service.v1.Host/CreateHost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *HostHTTPClientImpl) ListHost(ctx context.Context, in *ListHostReq, opts ...http.CallOption) (*ListHostReply, error) {
	var out ListHostReply
	pattern := "/server/api/host/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.server.service.v1.Host/ListHost"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
