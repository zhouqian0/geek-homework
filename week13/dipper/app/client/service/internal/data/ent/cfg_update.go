// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dipper/app/client/service/internal/data/ent/cfg"
	"dipper/app/client/service/internal/data/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CfgUpdate is the builder for updating Cfg entities.
type CfgUpdate struct {
	config
	hooks    []Hook
	mutation *CfgMutation
}

// Where appends a list predicates to the CfgUpdate builder.
func (cu *CfgUpdate) Where(ps ...predicate.Cfg) *CfgUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetKey sets the "key" field.
func (cu *CfgUpdate) SetKey(s string) *CfgUpdate {
	cu.mutation.SetKey(s)
	return cu
}

// SetValue sets the "value" field.
func (cu *CfgUpdate) SetValue(s string) *CfgUpdate {
	cu.mutation.SetValue(s)
	return cu
}

// SetIsDeleted sets the "is_deleted" field.
func (cu *CfgUpdate) SetIsDeleted(u uint8) *CfgUpdate {
	cu.mutation.ResetIsDeleted()
	cu.mutation.SetIsDeleted(u)
	return cu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cu *CfgUpdate) SetNillableIsDeleted(u *uint8) *CfgUpdate {
	if u != nil {
		cu.SetIsDeleted(*u)
	}
	return cu
}

// AddIsDeleted adds u to the "is_deleted" field.
func (cu *CfgUpdate) AddIsDeleted(u int8) *CfgUpdate {
	cu.mutation.AddIsDeleted(u)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CfgUpdate) SetCreatedAt(t time.Time) *CfgUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CfgUpdate) SetUpdatedAt(t time.Time) *CfgUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// Mutation returns the CfgMutation object of the builder.
func (cu *CfgUpdate) Mutation() *CfgMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CfgUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CfgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CfgUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CfgUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CfgUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CfgUpdate) defaults() {
	if _, ok := cu.mutation.CreatedAt(); !ok {
		v := cfg.UpdateDefaultCreatedAt()
		cu.mutation.SetCreatedAt(v)
	}
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := cfg.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CfgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cfg.Table,
			Columns: cfg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cfg.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfg.FieldKey,
		})
	}
	if value, ok := cu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfg.FieldValue,
		})
	}
	if value, ok := cu.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: cfg.FieldIsDeleted,
		})
	}
	if value, ok := cu.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: cfg.FieldIsDeleted,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cfg.FieldCreatedAt,
		})
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cfg.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cfg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CfgUpdateOne is the builder for updating a single Cfg entity.
type CfgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CfgMutation
}

// SetKey sets the "key" field.
func (cuo *CfgUpdateOne) SetKey(s string) *CfgUpdateOne {
	cuo.mutation.SetKey(s)
	return cuo
}

// SetValue sets the "value" field.
func (cuo *CfgUpdateOne) SetValue(s string) *CfgUpdateOne {
	cuo.mutation.SetValue(s)
	return cuo
}

// SetIsDeleted sets the "is_deleted" field.
func (cuo *CfgUpdateOne) SetIsDeleted(u uint8) *CfgUpdateOne {
	cuo.mutation.ResetIsDeleted()
	cuo.mutation.SetIsDeleted(u)
	return cuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (cuo *CfgUpdateOne) SetNillableIsDeleted(u *uint8) *CfgUpdateOne {
	if u != nil {
		cuo.SetIsDeleted(*u)
	}
	return cuo
}

// AddIsDeleted adds u to the "is_deleted" field.
func (cuo *CfgUpdateOne) AddIsDeleted(u int8) *CfgUpdateOne {
	cuo.mutation.AddIsDeleted(u)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CfgUpdateOne) SetCreatedAt(t time.Time) *CfgUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CfgUpdateOne) SetUpdatedAt(t time.Time) *CfgUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// Mutation returns the CfgMutation object of the builder.
func (cuo *CfgUpdateOne) Mutation() *CfgMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CfgUpdateOne) Select(field string, fields ...string) *CfgUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cfg entity.
func (cuo *CfgUpdateOne) Save(ctx context.Context) (*Cfg, error) {
	var (
		err  error
		node *Cfg
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CfgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CfgUpdateOne) SaveX(ctx context.Context) *Cfg {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CfgUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CfgUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CfgUpdateOne) defaults() {
	if _, ok := cuo.mutation.CreatedAt(); !ok {
		v := cfg.UpdateDefaultCreatedAt()
		cuo.mutation.SetCreatedAt(v)
	}
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := cfg.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CfgUpdateOne) sqlSave(ctx context.Context) (_node *Cfg, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cfg.Table,
			Columns: cfg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cfg.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cfg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cfg.FieldID)
		for _, f := range fields {
			if !cfg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cfg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfg.FieldKey,
		})
	}
	if value, ok := cuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cfg.FieldValue,
		})
	}
	if value, ok := cuo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: cfg.FieldIsDeleted,
		})
	}
	if value, ok := cuo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: cfg.FieldIsDeleted,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cfg.FieldCreatedAt,
		})
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cfg.FieldUpdatedAt,
		})
	}
	_node = &Cfg{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cfg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
