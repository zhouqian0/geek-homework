// Code generated by entc, DO NOT EDIT.

package ent

import (
	"dipper/app/server/service/internal/data/ent/blacklist"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Blacklist is the model entity for the Blacklist schema.
type Blacklist struct {
	config `json:"-"`
	// ID of the ent.
	// 索引 id
	ID int64 `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	// 黑名单的 key(机房的验证码)
	Code string `json:"code,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	// 是否被删除: 0否 1是
	IsDeleted uint8 `json:"is_deleted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Blacklist) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case blacklist.FieldID, blacklist.FieldIsDeleted:
			values[i] = new(sql.NullInt64)
		case blacklist.FieldCode:
			values[i] = new(sql.NullString)
		case blacklist.FieldCreatedAt, blacklist.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Blacklist", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Blacklist fields.
func (b *Blacklist) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blacklist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int64(value.Int64)
		case blacklist.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				b.Code = value.String
			}
		case blacklist.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				b.IsDeleted = uint8(value.Int64)
			}
		case blacklist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case blacklist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Blacklist.
// Note that you need to call Blacklist.Unwrap() before calling this method if this Blacklist
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Blacklist) Update() *BlacklistUpdateOne {
	return (&BlacklistClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Blacklist entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Blacklist) Unwrap() *Blacklist {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Blacklist is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Blacklist) String() string {
	var builder strings.Builder
	builder.WriteString("Blacklist(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", code=")
	builder.WriteString(b.Code)
	builder.WriteString(", is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", b.IsDeleted))
	builder.WriteString(", created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Blacklists is a parsable slice of Blacklist.
type Blacklists []*Blacklist

func (b Blacklists) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
