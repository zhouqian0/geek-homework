// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ClientHTTPServer interface {
	CheckFirstConn(context.Context, *CheckFirstConnReq) (*CheckFirstConnReply, error)
	ConnectServer(context.Context, *ConnectServerReq) (*ConnectServerReply, error)
	GetHostInfo(context.Context, *GetHostInfoReq) (*GetHostInfoReply, error)
	GetSystemInfo(context.Context, *GetSystemInfoReq) (*GetSystemInfoReply, error)
	ListAntivirus(context.Context, *ListAntivirusReq) (*ListAntivirusReply, error)
	ListCom(context.Context, *ListComReq) (*ListComReply, error)
	ListNet(context.Context, *ListNetReq) (*ListNetReply, error)
}

func RegisterClientHTTPServer(s *http.Server, srv ClientHTTPServer) {
	r := s.Route("/")
	r.GET("/server/api/sys/net", _Client_ListNet0_HTTP_Handler(srv))
	r.GET("/server/api/sys/com", _Client_ListCom0_HTTP_Handler(srv))
	r.GET("/server/api/sys/info", _Client_GetSystemInfo0_HTTP_Handler(srv))
	r.GET("/server/api/sys/antivirus", _Client_ListAntivirus0_HTTP_Handler(srv))
	r.GET("/server/api/host/info", _Client_GetHostInfo0_HTTP_Handler(srv))
	r.GET("/server/api/conn/check", _Client_CheckFirstConn0_HTTP_Handler(srv))
	r.GET("/server/api/conn/open", _Client_ConnectServer0_HTTP_Handler(srv))
}

func _Client_ListNet0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNetReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.client.service.v1.Client/ListNet")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNet(ctx, req.(*ListNetReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNetReply)
		return ctx.Result(200, reply)
	}
}

func _Client_ListCom0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListComReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.client.service.v1.Client/ListCom")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCom(ctx, req.(*ListComReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListComReply)
		return ctx.Result(200, reply)
	}
}

func _Client_GetSystemInfo0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSystemInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.client.service.v1.Client/GetSystemInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSystemInfo(ctx, req.(*GetSystemInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSystemInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Client_ListAntivirus0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAntivirusReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.client.service.v1.Client/ListAntivirus")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAntivirus(ctx, req.(*ListAntivirusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAntivirusReply)
		return ctx.Result(200, reply)
	}
}

func _Client_GetHostInfo0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHostInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.client.service.v1.Client/GetHostInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHostInfo(ctx, req.(*GetHostInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHostInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Client_CheckFirstConn0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckFirstConnReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.client.service.v1.Client/CheckFirstConn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckFirstConn(ctx, req.(*CheckFirstConnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckFirstConnReply)
		return ctx.Result(200, reply)
	}
}

func _Client_ConnectServer0_HTTP_Handler(srv ClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConnectServerReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.client.service.v1.Client/ConnectServer")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConnectServer(ctx, req.(*ConnectServerReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConnectServerReply)
		return ctx.Result(200, reply)
	}
}

type ClientHTTPClient interface {
	CheckFirstConn(ctx context.Context, req *CheckFirstConnReq, opts ...http.CallOption) (rsp *CheckFirstConnReply, err error)
	ConnectServer(ctx context.Context, req *ConnectServerReq, opts ...http.CallOption) (rsp *ConnectServerReply, err error)
	GetHostInfo(ctx context.Context, req *GetHostInfoReq, opts ...http.CallOption) (rsp *GetHostInfoReply, err error)
	GetSystemInfo(ctx context.Context, req *GetSystemInfoReq, opts ...http.CallOption) (rsp *GetSystemInfoReply, err error)
	ListAntivirus(ctx context.Context, req *ListAntivirusReq, opts ...http.CallOption) (rsp *ListAntivirusReply, err error)
	ListCom(ctx context.Context, req *ListComReq, opts ...http.CallOption) (rsp *ListComReply, err error)
	ListNet(ctx context.Context, req *ListNetReq, opts ...http.CallOption) (rsp *ListNetReply, err error)
}

type ClientHTTPClientImpl struct {
	cc *http.Client
}

func NewClientHTTPClient(client *http.Client) ClientHTTPClient {
	return &ClientHTTPClientImpl{client}
}

func (c *ClientHTTPClientImpl) CheckFirstConn(ctx context.Context, in *CheckFirstConnReq, opts ...http.CallOption) (*CheckFirstConnReply, error) {
	var out CheckFirstConnReply
	pattern := "/server/api/conn/check"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.client.service.v1.Client/CheckFirstConn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) ConnectServer(ctx context.Context, in *ConnectServerReq, opts ...http.CallOption) (*ConnectServerReply, error) {
	var out ConnectServerReply
	pattern := "/server/api/conn/open"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.client.service.v1.Client/ConnectServer"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) GetHostInfo(ctx context.Context, in *GetHostInfoReq, opts ...http.CallOption) (*GetHostInfoReply, error) {
	var out GetHostInfoReply
	pattern := "/server/api/host/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.client.service.v1.Client/GetHostInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) GetSystemInfo(ctx context.Context, in *GetSystemInfoReq, opts ...http.CallOption) (*GetSystemInfoReply, error) {
	var out GetSystemInfoReply
	pattern := "/server/api/sys/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.client.service.v1.Client/GetSystemInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) ListAntivirus(ctx context.Context, in *ListAntivirusReq, opts ...http.CallOption) (*ListAntivirusReply, error) {
	var out ListAntivirusReply
	pattern := "/server/api/sys/antivirus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.client.service.v1.Client/ListAntivirus"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) ListCom(ctx context.Context, in *ListComReq, opts ...http.CallOption) (*ListComReply, error) {
	var out ListComReply
	pattern := "/server/api/sys/com"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.client.service.v1.Client/ListCom"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ClientHTTPClientImpl) ListNet(ctx context.Context, in *ListNetReq, opts ...http.CallOption) (*ListNetReply, error) {
	var out ListNetReply
	pattern := "/server/api/sys/net"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.client.service.v1.Client/ListNet"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
