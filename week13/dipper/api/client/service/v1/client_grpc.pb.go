// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/client/service/v1/client.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientClient interface {
	ListNet(ctx context.Context, in *ListNetReq, opts ...grpc.CallOption) (*ListNetReply, error)
	ListCom(ctx context.Context, in *ListComReq, opts ...grpc.CallOption) (*ListComReply, error)
	GetSystemInfo(ctx context.Context, in *GetSystemInfoReq, opts ...grpc.CallOption) (*GetSystemInfoReply, error)
	ListAntivirus(ctx context.Context, in *ListAntivirusReq, opts ...grpc.CallOption) (*ListAntivirusReply, error)
	GetHostInfo(ctx context.Context, in *GetHostInfoReq, opts ...grpc.CallOption) (*GetHostInfoReply, error)
	CheckFirstConn(ctx context.Context, in *CheckFirstConnReq, opts ...grpc.CallOption) (*CheckFirstConnReply, error)
	ConnectServer(ctx context.Context, in *ConnectServerReq, opts ...grpc.CallOption) (*ConnectServerReply, error)
}

type clientClient struct {
	cc grpc.ClientConnInterface
}

func NewClientClient(cc grpc.ClientConnInterface) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) ListNet(ctx context.Context, in *ListNetReq, opts ...grpc.CallOption) (*ListNetReply, error) {
	out := new(ListNetReply)
	err := c.cc.Invoke(ctx, "/api.client.service.v1.Client/ListNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) ListCom(ctx context.Context, in *ListComReq, opts ...grpc.CallOption) (*ListComReply, error) {
	out := new(ListComReply)
	err := c.cc.Invoke(ctx, "/api.client.service.v1.Client/ListCom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoReq, opts ...grpc.CallOption) (*GetSystemInfoReply, error) {
	out := new(GetSystemInfoReply)
	err := c.cc.Invoke(ctx, "/api.client.service.v1.Client/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) ListAntivirus(ctx context.Context, in *ListAntivirusReq, opts ...grpc.CallOption) (*ListAntivirusReply, error) {
	out := new(ListAntivirusReply)
	err := c.cc.Invoke(ctx, "/api.client.service.v1.Client/ListAntivirus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GetHostInfo(ctx context.Context, in *GetHostInfoReq, opts ...grpc.CallOption) (*GetHostInfoReply, error) {
	out := new(GetHostInfoReply)
	err := c.cc.Invoke(ctx, "/api.client.service.v1.Client/GetHostInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) CheckFirstConn(ctx context.Context, in *CheckFirstConnReq, opts ...grpc.CallOption) (*CheckFirstConnReply, error) {
	out := new(CheckFirstConnReply)
	err := c.cc.Invoke(ctx, "/api.client.service.v1.Client/CheckFirstConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) ConnectServer(ctx context.Context, in *ConnectServerReq, opts ...grpc.CallOption) (*ConnectServerReply, error) {
	out := new(ConnectServerReply)
	err := c.cc.Invoke(ctx, "/api.client.service.v1.Client/ConnectServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
// All implementations must embed UnimplementedClientServer
// for forward compatibility
type ClientServer interface {
	ListNet(context.Context, *ListNetReq) (*ListNetReply, error)
	ListCom(context.Context, *ListComReq) (*ListComReply, error)
	GetSystemInfo(context.Context, *GetSystemInfoReq) (*GetSystemInfoReply, error)
	ListAntivirus(context.Context, *ListAntivirusReq) (*ListAntivirusReply, error)
	GetHostInfo(context.Context, *GetHostInfoReq) (*GetHostInfoReply, error)
	CheckFirstConn(context.Context, *CheckFirstConnReq) (*CheckFirstConnReply, error)
	ConnectServer(context.Context, *ConnectServerReq) (*ConnectServerReply, error)
	mustEmbedUnimplementedClientServer()
}

// UnimplementedClientServer must be embedded to have forward compatible implementations.
type UnimplementedClientServer struct {
}

func (UnimplementedClientServer) ListNet(context.Context, *ListNetReq) (*ListNetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNet not implemented")
}
func (UnimplementedClientServer) ListCom(context.Context, *ListComReq) (*ListComReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCom not implemented")
}
func (UnimplementedClientServer) GetSystemInfo(context.Context, *GetSystemInfoReq) (*GetSystemInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedClientServer) ListAntivirus(context.Context, *ListAntivirusReq) (*ListAntivirusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAntivirus not implemented")
}
func (UnimplementedClientServer) GetHostInfo(context.Context, *GetHostInfoReq) (*GetHostInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostInfo not implemented")
}
func (UnimplementedClientServer) CheckFirstConn(context.Context, *CheckFirstConnReq) (*CheckFirstConnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFirstConn not implemented")
}
func (UnimplementedClientServer) ConnectServer(context.Context, *ConnectServerReq) (*ConnectServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectServer not implemented")
}
func (UnimplementedClientServer) mustEmbedUnimplementedClientServer() {}

// UnsafeClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServer will
// result in compilation errors.
type UnsafeClientServer interface {
	mustEmbedUnimplementedClientServer()
}

func RegisterClientServer(s grpc.ServiceRegistrar, srv ClientServer) {
	s.RegisterService(&Client_ServiceDesc, srv)
}

func _Client_ListNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).ListNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.client.service.v1.Client/ListNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).ListNet(ctx, req.(*ListNetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_ListCom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).ListCom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.client.service.v1.Client/ListCom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).ListCom(ctx, req.(*ListComReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.client.service.v1.Client/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GetSystemInfo(ctx, req.(*GetSystemInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_ListAntivirus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAntivirusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).ListAntivirus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.client.service.v1.Client/ListAntivirus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).ListAntivirus(ctx, req.(*ListAntivirusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GetHostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GetHostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.client.service.v1.Client/GetHostInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GetHostInfo(ctx, req.(*GetHostInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_CheckFirstConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFirstConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).CheckFirstConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.client.service.v1.Client/CheckFirstConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).CheckFirstConn(ctx, req.(*CheckFirstConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_ConnectServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).ConnectServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.client.service.v1.Client/ConnectServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).ConnectServer(ctx, req.(*ConnectServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Client_ServiceDesc is the grpc.ServiceDesc for Client service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Client_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.client.service.v1.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNet",
			Handler:    _Client_ListNet_Handler,
		},
		{
			MethodName: "ListCom",
			Handler:    _Client_ListCom_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _Client_GetSystemInfo_Handler,
		},
		{
			MethodName: "ListAntivirus",
			Handler:    _Client_ListAntivirus_Handler,
		},
		{
			MethodName: "GetHostInfo",
			Handler:    _Client_GetHostInfo_Handler,
		},
		{
			MethodName: "CheckFirstConn",
			Handler:    _Client_CheckFirstConn_Handler,
		},
		{
			MethodName: "ConnectServer",
			Handler:    _Client_ConnectServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/client/service/v1/client.proto",
}
