// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/server/service/v1/host.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostClient is the client API for Host service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostClient interface {
	CreateHost(ctx context.Context, in *CreateHostReq, opts ...grpc.CallOption) (*CreateHostReply, error)
	ListHost(ctx context.Context, in *ListHostReq, opts ...grpc.CallOption) (*ListHostReply, error)
	GetHostByVerifyCode(ctx context.Context, in *GetHostByVerifyCodeReq, opts ...grpc.CallOption) (*GetHostByVerifyCodeReply, error)
	AuthHost(ctx context.Context, in *AuthHostReq, opts ...grpc.CallOption) (*AuthHostReply, error)
}

type hostClient struct {
	cc grpc.ClientConnInterface
}

func NewHostClient(cc grpc.ClientConnInterface) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) CreateHost(ctx context.Context, in *CreateHostReq, opts ...grpc.CallOption) (*CreateHostReply, error) {
	out := new(CreateHostReply)
	err := c.cc.Invoke(ctx, "/api.server.service.v1.Host/CreateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) ListHost(ctx context.Context, in *ListHostReq, opts ...grpc.CallOption) (*ListHostReply, error) {
	out := new(ListHostReply)
	err := c.cc.Invoke(ctx, "/api.server.service.v1.Host/ListHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) GetHostByVerifyCode(ctx context.Context, in *GetHostByVerifyCodeReq, opts ...grpc.CallOption) (*GetHostByVerifyCodeReply, error) {
	out := new(GetHostByVerifyCodeReply)
	err := c.cc.Invoke(ctx, "/api.server.service.v1.Host/GetHostByVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) AuthHost(ctx context.Context, in *AuthHostReq, opts ...grpc.CallOption) (*AuthHostReply, error) {
	out := new(AuthHostReply)
	err := c.cc.Invoke(ctx, "/api.server.service.v1.Host/AuthHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServer is the server API for Host service.
// All implementations must embed UnimplementedHostServer
// for forward compatibility
type HostServer interface {
	CreateHost(context.Context, *CreateHostReq) (*CreateHostReply, error)
	ListHost(context.Context, *ListHostReq) (*ListHostReply, error)
	GetHostByVerifyCode(context.Context, *GetHostByVerifyCodeReq) (*GetHostByVerifyCodeReply, error)
	AuthHost(context.Context, *AuthHostReq) (*AuthHostReply, error)
	mustEmbedUnimplementedHostServer()
}

// UnimplementedHostServer must be embedded to have forward compatible implementations.
type UnimplementedHostServer struct {
}

func (UnimplementedHostServer) CreateHost(context.Context, *CreateHostReq) (*CreateHostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (UnimplementedHostServer) ListHost(context.Context, *ListHostReq) (*ListHostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHost not implemented")
}
func (UnimplementedHostServer) GetHostByVerifyCode(context.Context, *GetHostByVerifyCodeReq) (*GetHostByVerifyCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostByVerifyCode not implemented")
}
func (UnimplementedHostServer) AuthHost(context.Context, *AuthHostReq) (*AuthHostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthHost not implemented")
}
func (UnimplementedHostServer) mustEmbedUnimplementedHostServer() {}

// UnsafeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServer will
// result in compilation errors.
type UnsafeHostServer interface {
	mustEmbedUnimplementedHostServer()
}

func RegisterHostServer(s grpc.ServiceRegistrar, srv HostServer) {
	s.RegisterService(&Host_ServiceDesc, srv)
}

func _Host_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.service.v1.Host/CreateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).CreateHost(ctx, req.(*CreateHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_ListHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).ListHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.service.v1.Host/ListHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).ListHost(ctx, req.(*ListHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_GetHostByVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostByVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).GetHostByVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.service.v1.Host/GetHostByVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).GetHostByVerifyCode(ctx, req.(*GetHostByVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_AuthHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).AuthHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.server.service.v1.Host/AuthHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).AuthHost(ctx, req.(*AuthHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Host_ServiceDesc is the grpc.ServiceDesc for Host service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Host_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.server.service.v1.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHost",
			Handler:    _Host_CreateHost_Handler,
		},
		{
			MethodName: "ListHost",
			Handler:    _Host_ListHost_Handler,
		},
		{
			MethodName: "GetHostByVerifyCode",
			Handler:    _Host_GetHostByVerifyCode_Handler,
		},
		{
			MethodName: "AuthHost",
			Handler:    _Host_AuthHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/server/service/v1/host.proto",
}
