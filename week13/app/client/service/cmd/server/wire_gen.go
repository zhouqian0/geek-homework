// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"dipper/app/client/service/internal/biz"
	"dipper/app/client/service/internal/conf"
	"dipper/app/client/service/internal/data"
	"dipper/app/client/service/internal/server"
	"dipper/app/client/service/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	machineUseCase := biz.NewMachineUseCase(logger)
	client := data.NewEntClient(confData, logger)
	hostServer := data.NewHostServer(confServer)
	dataData, cleanup, err := data.NewData(confServer, client, hostServer, logger)
	if err != nil {
		return nil, nil, err
	}
	configRepo := data.NewConfigRepo(dataData, logger)
	configUseCase := biz.NewConfigUseCase(configRepo, logger)
	hostRepo := data.NewHostRepo(dataData, logger)
	hostUseCase := biz.NewHostUseCase(hostRepo, logger)
	clientService := service.NewClientService(machineUseCase, configUseCase, hostUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, logger, clientService)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
