package main

// 时间复杂度为 O(n)，n 为台阶数量，因为需要遍历整个数组才能计算结果，所以时间复杂度为 O(n)。
// 空间复杂度O(n)，n 为台阶数量，因为借助了一个数组用辅助计算，数组长度为 n，所以空间复杂度为 O(n)。
func climbStairs(n int) int {
	// 只有一节台阶的时候，只有一种到达方法
	if n == 1 {
		return 1
	}
	// 定义动规辅助数组，并进行初始化
	dp := make([]int, n+1)
	dp[0], dp[1] = 1, 1
	// 根据动规方程 f(x) = f(x-1) + f(x-2) 计算结果
	for i := 2; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	return dp[n]
}

// climbStairs 优化版本。
// 时间复杂度为 O(n)，n 为台阶数量，因为需要遍历整个数组才能计算结果，所以时间复杂度为 O(n)。
// 空间复杂度O(1)，因为没有使用辅助数组，而是使用了常数级别的辅助变量辅助计算，所以空间复杂度为 O(1)。
func climbStairs1(n int) int {
	// 不使用辅助数组计算
	// 用常数级别的辅助变量代替辅助数组
	// p 表示能到达前两节台阶的方法数量，q 表示能到达前一节台阶的方法的数量，r 表示达到当前台阶的方法的数量
	p, q, r := 0, 0, 1
	for i := 1; i <= n; i++ {
		p = q
		q = r
		r = p + q
	}
	return r
}
